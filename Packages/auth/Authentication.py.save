from flask_jwt_extended import (create_access_token, create_refresh_token, jwt_required, jwt_refresh_token_required,
                                get_jwt_identity, get_raw_jwt)
from flask_restful import Resource, reqparse

from flask import url_for
from flask_mail import Mail, Message 
import datetime
from itsdangerous import URLSafeTimedSerializer, SignatureExpired
from Models import UserModel, RevokedTokenModel

parser = reqparse.RequestParser()
parser.add_argument('fullName', help = 'This field cannot be blank', required = False)
parser.add_argument('email', help = 'This field cannot be blank', required = True)
parser.add_argument('password', help = 'This field cannot be blank', required = False)
parser.add_argument('admin', help = 'This field cannot be blank', required = False)
parser.add_argument('active', help = 'This field cannot be blank', required = False)


decoded_payload = None

mail = Mail()
s = URLSafeTimedSerializer('aevol0309!')

class UserRegistration(Resource):
    def post(self):
        data = parser.parse_args()
        print(data)
        if UserModel.find_by_email(data['email']):
            return {'message': 'User with email {} already exists'.format(data['email'])}

        new_user = UserModel(
            username=data['fullName'],
            email= data['email'],
            password = UserModel.generate_hash(data['password']),
            registered_on=datetime.datetime.now(),
            admin = False,
            active =False
        )
       # try:
         
new_user.save_to_db()
         expires = datetime.timedelta(seconds=3600)
         access_token = create_access_token(identity=data['email'],expires_delta=expires)
         refresh_token = create_refresh_token(identity=data['email'])
           # return {
               # 'message': 'User with email {} was created'.format(data['email']),
                
               # 'refresh_token': refresh_token
           # }
       # except:
         #   return {'message': 'Something went wrong'},500


class UserLogin(Resource):
    def post(self):
        data = parser.parse_args()
   
        current_user = UserModel.find_by_email(data['email'])

        if not current_user:
            return {'message': 'User with  {} doesn\'t exist'.format(data['email'])},400
        if (current_user.active):
            if UserModel.verify_hash(data['password'], current_user.password):
                expires = datetime.timedelta(seconds=3600)
                access_token = create_access_token(identity=data['email'],expires_delta=expires)
                refresh_token = create_refresh_token(identity=data['email'])
                return {
                    'message': 'Logged in as {}'.format(current_user.username),
                    'ID_USER':current_user.ID_USER,
                    'access_token': access_token,
                    'refresh_token': refresh_token
                },200
            else:
                return {'message': 'Wrong credentials'},400
        else:
            return {'message': 'Account not activate'},400


class UserLogoutAccess(Resource):
    @jwt_required
    def post(self):    
        jti = get_raw_jwt()['jti']
        try:
            revoked_token = RevokedTokenModel(jti = jti)
            revoked_token.add()
            return {'message': 'Access token has been revoked'}
        except:
            return {'message': 'Something went wrong'}, 500

class UserLogoutRefresh(Resource):
    @jwt_refresh_token_required
    def post(self):
        jti = get_raw_jwt()['jti']
        try:
            revoked_token = RevokedTokenModel(jti = jti)
            revoked_token.add()
            return {'message': 'Refresh token has been revoked'}
        except:
            return {'message': 'Something went wrong'}, 500

class TokenRefresh(Resource):
    @jwt_refresh_token_required
    def post(self):
        current_user = get_jwt_identity()
        expires = datetime.timedelta(seconds=3600)
        access_token = create_access_token(identity=data['email'],expires_delta=expires)
        return {'access_token': access_token}




class SecretResource(Resource):
    @jwt_required
    def get(self):
        return {
            'answer': 42
        }
class ResetPasswordMail(Resource):
    def post(self):
        data = parser.parse_args()
        print(data)
        current_user = UserModel.find_by_email(data['email'])
        if (current_user):
            email = data['email']
            token = create_access_token(identity=data['email'])
            link = 'http://localhost:4200/#/auth/reset-password?token={}'.format(token) 
            msg = Message('Reset Password', sender='aevol516@gmail.com', recipients=[email])
            msg.body = 'Reset Your Password With This Link :  {}'.format(link)
            mail.send(msg)
            return {
                'email' : data['email'],
                'token' : token,
                'message':'An email has been sent to {}. Please check you inbox'.format(data['email'])
               }
        else:
            return {'message' : 'User does not exist'}
 
        
        
class ResetPassword(Resource):
    def post(self):
        data = parser.parse_args()
        print (data)
        return UserModel.changePass(data['email'],data['password'])  
